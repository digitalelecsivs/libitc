library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.itc.all;
entity dot_p is
	port (
		clk   : in std_logic;
		rst_n : in std_logic;

		key_row : in u4r_t;
		key_col : out u4r_t;

		seg_led : out u8r_t;
		seg_com : out u8r_t;

		dot_red   : out u8r_t;
		dot_green : out u8r_t;
		dot_com   : out u8r_t
	);
end dot_p;

architecture arch of dot_p is
	signal key : i4_t;
	signal seg_data:string(1 to 8);
	signal data_g,data_r:u8r_arr_t(0 to 7);
	signal pressed_i,mode_s:std_logic;
	signal key_r:std_logic;
	signal clk1000, clk_2hz, clk_e2 : std_logic;
	type mode_t is (reset,sel,fuc1,fuc2);
	signal mode:mode_t;
	signal count:integer;
	signal fuc_s:std_logic;
	constant R:u8r_arr_t(0 to 7):=(x"41",x"42",x"44",x"45",x"7C",x"42",x"42",x"7C");
	constant E:u8r_arr_t(0 to 7):=(x"7E",x"40",x"40",x"7E",x"40",x"40",x"40",x"7E");
	constant S:u8r_arr_t(0 to 7):=(x"7E",x"42",x"02",x"04",x"38",x"40",x"42",x"3C");
	constant T:u8r_arr_t(0 to 7):=(x"48",x"48",x"48",x"48",x"48",x"48",x"48",x"FF");
	
begin
	
process(clk1000)
	begin
	case mode is 
		when reset=>
			count<=count+1;
			case count is 
				when 0=>
					seg_data<="00000000";
					data_r<=R;
				when 500=>
					seg_data<="11111111";
				when 1000=>
					seg_data<="22222222";
					data_r<=E;
				when 1500=>
					seg_data<="33333333";
				when 2000=>
					seg_data<="44444444";
					data_r<=S;
				when 2500=>
					seg_data<="55555555";
				when 3000=>
					seg_data<="66666666";
					data_r<=E;
				when 3500=>
					seg_data<="77777777";
				when 4000=>
					seg_data<="88888888";
					data_r<=T;
				when 4500=>
					seg_data<="99999999";
				when 5000=>
					mode<=sel;
					data_r<=(x"00",x"00",x"00",x"00",x"00",x"00",x"00",x"00");
				when others=>count<=0;
			end case;
		when sel=>
			mode<=reset;
			if key_r='1' and key=4 then 
				mode_s<=not mode_s;
			end if;
			if key_r='1' and key=8 then
				if mode_s = '0' then
					mode<=fuc1;
				else 
					mode<=fuc2;
				end if;
			end if;
			if mode_s='0'then
				seg_data<="  F1    ";
				data_r<=(x"60",x"22",x"34",x"14",x"74",x"30",x"60",x"60");
			else
				seg_data<="  F2    ";
				data_r<=(x"E0",x"40",x"00",x"00",x"00",x"00",x"DB",x"DB");
			end if;
		when fuc1=>
		when fuc2=>
	end case;
end process;
dot_inst : entity work.dot(arch)
	generic map(
		common_anode => '0'
	)
	port map(
		clk       => clk,
		rst_n     => rst_n,
		dot_red   => dot_red,
		dot_green => dot_green,
		dot_com   => dot_com,
		data_r    => data_r,
		data_g    => data_g
	);
clk_inst : entity work.clk(arch)
	generic map(
		freq => 1000
	)
	port map(
		clk_in  => clk,
		rst_n   => rst_n,
		clk_out => clk1000
	);
clk_2hz_inst : entity work.clk(arch)
	generic map(
		freq => 2
	)
	port map(
		clk_in  => clk,
		rst_n   => rst_n,
		clk_out => clk_2hz
	);
seg_inst : entity work.seg(arch)
	generic map(
		common_anode => '1'
	)
	port map(
		clk     => clk,
		rst_n   => rst_n,
		seg_led => seg_led,
		seg_com => seg_com,
		data    => seg_data,
		dot => (others => '0')
	);
key_inst : entity work.key(arch)
	port map(
		clk     => clk,
		rst_n   => rst_n,
		key_row => key_row,
		key_col => key_col,
		pressed => pressed_i,
		key     => key
	);
edge_key_inst : entity work.edge(arch)
	port map(
		clk     => clk1000,
		rst_n   => rst_n,
		sig_in  => pressed_i,
		rising  => key_r,
		falling => open
	);
edge_clk_2hz_inst : entity work.edge(arch)
	port map(
		clk     => clk1000,
		rst_n   => rst_n,
		sig_in  => clk_2hz,
		rising  => clk_e2,
		falling => open
	);
end arch;